# GitHub Actions Workflow for Automated Render Deployment & Bootstrapping
#
# This workflow automates the entire deployment process for a Next.js application on Render.
#
# Features:
# 1. Triggers automatically on push to the 'main' branch.
# 2. Initiates a new deployment on Render using a deploy hook.
# 3. Waits intelligently for the Render deployment to complete and be 'live'.
# 4. Calls a secure bootstrap endpoint on the live application to run database migrations and seed data.
# 5. Centralizes all sensitive keys (API keys, service IDs) in GitHub Secrets.

name: Deploy to Render & Bootstrap

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    steps:
      # Step 1: Trigger the Render Deploy Hook
      # This tells Render to pull the latest commit and start a new build.
      - name: Trigger Render Deploy
        id: deploy
        run: |
          deploy_hook_url="${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
          if [ -z "$deploy_hook_url" ]; then
            echo "RENDER_DEPLOY_HOOK_URL secret not set. Skipping deploy."
            exit 1
          fi
          curl -sS -X POST "$deploy_hook_url"

      # Step 2: Wait for the Deployment to Go Live
      # This is the crucial step that was missing. Instead of guessing, this polls Render's API
      # to check the status of the deployment triggered in the previous step.
      - name: Wait for Render Deployment to be Live
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
            echo "RENDER_API_KEY or RENDER_SERVICE_ID secrets not set. Cannot verify deployment status."
            exit 1
          fi
          
          echo "Waiting for deployment to go live..."
          # Poll for 10 minutes (60 checks * 10 seconds)
          for i in {1..60}; do
            # Fetch the latest deploy for the service
            latest_deploy=$(curl -sS -H "Authorization: Bearer $RENDER_API_KEY" \
                                "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys?limit=1")
            
            # Extract status using jq
            status=$(echo "$latest_deploy" | jq -r '.[0].deploy.status')
            
            echo "Current deployment status: $status"
            
            # Check for failure conditions
            if [[ "$status" == "build_failed" || "$status" == "canceled" || "$status" == "deactivated" ]]; then
              echo "::error::Deployment failed with status: $status"
              exit 1
            fi
            
            # Check for success
            if [ "$status" = "live" ]; then
              echo "✅ Deployment is live!"
              exit 0
            fi
            
            # Wait before polling again
            sleep 10
          done
          
          echo "::error::Timed out after 10 minutes waiting for deployment to go live."
          exit 1

      # Step 3: Call the Bootstrap Endpoint
      # Once the application is confirmed live, this step calls the secure bootstrap endpoint
      # to run database migrations and create the admin user. This replaces all manual SQL steps.
      - name: Run Bootstrap (Migrations & Seeding)
        env:
          BOOTSTRAP_URL: ${{ secrets.BOOTSTRAP_URL }}
          BOOTSTRAP_SECRET: ${{ secrets.BOOTSTRAP_SECRET }}
        run: |
          if [ -z "$BOOTSTRAP_URL" ] || [ -z "$BOOTSTRAP_SECRET" ]; then
            echo "BOOTSTRAP_URL or BOOTSTRAP_SECRET not set. Skipping bootstrap."
            exit 1
          fi
          
          echo "Calling bootstrap endpoint..."
          # The bootstrap URL should include the path, e.g., https://yourapp.onrender.com/api/setup/bootstrap
          full_url="${BOOTSTRAP_URL}?secret=${BOOTSTRAP_SECRET}"
          
          # Use curl to make the request
          response_code=$(curl -sS -o /dev/null -w "%{http_code}" "$full_url")
          
          if [ "$response_code" -ge 200 ] && [ "$response_code" -lt 300 ]; then
            echo "✅ Bootstrap endpoint returned success ($response_code)."
          else
            echo "::error::Bootstrap endpoint failed with status code $response_code."
            # Optionally, fetch the response body for more details
            curl -sS "$full_url"
            exit 1
          fi
